var PHANTOM_PATH = process.env.PHANTOM_PATH || '/usr/local/bin/phantomjs',
    IMAGEMAGICK_CONVERT_PATH = process.env.IMAGEMAGICK_CONVERT_PATH || '/usr/local/bin/convert',
    WWW_ROOT = 'www/',
    NAVIGATION_PATH = 'www/nav.html';

var async     = require('async'),
    jsdom     = require('jsdom'),
    _         = require('underscore'),
    path      = require('path'),
    fs        = require('fs'),
    imageinfo = require('imageinfo'),
    spawn     = require('child_process').spawn;

var pageList = [],
    imageList = [];

function findActualImage(src) {
  return _.find(imageList, function(img) {
    return img.src === src;
  });
}

function isResizeRequired(pageImage) {
  var isLocalFile = pageImage.src.indexOf('http://') !== 0;
  if (! isLocalFile) {
    console.log('Skipping image resize. Image is not a local file: ' + pageImage.src);
    return false;
  }
  var actualImage = findActualImage(pageImage.src);
  if (! actualImage) {
    console.log('Skipping image resize. Could not find actual image: ' + pageImage.src);
    return false;
  }
  // If the image is not currently visible, width and height are returned as 0
  if (pageImage.width === 0 || pageImage.height === 0) {
    console.log('Skipping image resize. Could not find image dimensions in page for: ' + pageImage.src);
    return false;
  }

  var actualImageIsLarger = (actualImage.width * actualImage.height) >
                                (pageImage.width * pageImage.height);
  return actualImageIsLarger;
}

function isReplaceRequired(pageImage) {
  if (! isResizeRequired(pageImage)) {
    console.log('Skipping image replacement. Resize not required for image: ' + pageImage.src);
    return false;
  }
  var actualImage = findActualImage(pageImage.src);
  // In some cases (animated gifs), the generated image size can be larger than the original
  // Let's throw away larger images
  if (pageImage.size >= actualImage.size) {
    console.log('Skipping image replacement. Generated image is larger than original: ' + pageImage.src);
    return false;
  }
  return true;
}

function generateImage(pageImage, callback) {

  async.waterfall([
    function genImage(next) {
      if (! isResizeRequired(pageImage)) {
        return callback(null);
      }
      var extension = path.extname(pageImage.src),
          baseName = path.basename(pageImage.src, extension),
          size = pageImage.width + 'x' + pageImage.height,
          newBaseName = baseName + '_' + size + extension;

      pageImage.newPath = path.join(path.dirname(pageImage.src), newBaseName);

      var args = [WWW_ROOT + pageImage.src, '-resize', size, WWW_ROOT + pageImage.newPath];
      var convert = spawn(IMAGEMAGICK_CONVERT_PATH, args);
      convert.on('exit', function(code) {
        var err = null;
        if (code !== 0) {
          err = new Error('Image Magick exited with code ' + code);
        }
        next(err);
      });
    },
    function getFileInfo(next) {
      console.log('Generated %s', pageImage.newPath);
      fs.stat(WWW_ROOT + pageImage.newPath, next);
    },
    function saveImageSize(stats, next) {
      pageImage.size = stats.size;
      console.log('pageImage.size for image:' + pageImage.src, pageImage.size);
      next(null);
    }
  ], callback);

}

function hideContentBelowFold(page, callback) {
  var args = ['tools/hide-below-fold.js', page.path];
  var phantom = spawn(PHANTOM_PATH, args);
  phantom.stdout.setEncoding('utf8');
  var html = '';
  phantom.stdout.on('data', function (data) {
    html += data;
  });
  phantom.on('exit', function(code) {
    var err = null;
    if (code > 0) {
      err = new Error('Phantom exited with code ' + code);
    } else {
      console.log('Read page HTML, hide content below fold', page.path);
    }
    callback(err, html);
  });
};

async.waterfall([
  function readNavigation(next) {
    jsdom.env({
      html: NAVIGATION_PATH,
      features: { QuerySelector: true, FetchExternalResources: false, ProcessExternalResources: false },
      done: function(err, window) {
        if (err) return next(err);
        var nodeList = window.document.querySelectorAll('nav a'),
            pageList = [];
        for (var i = 0; i < nodeList.length; ++i) {
          pageList.push({
            path: WWW_ROOT + nodeList[i].getAttribute('href')
          });
        }
        window.close();
        next(err, pageList);
      }
    });
  },
  function getRequiredImageSizes(pages, next) {
    
    pageList = pages;

    function getImageSizes(page, callback) {
      var args = ['tools/image-info.js', page.path];
      var phantom = spawn(PHANTOM_PATH, args);
      phantom.stdout.setEncoding('utf8');
      phantom.stdout.on('data', function (data) {
        try {
          page.images = JSON.parse(data);
        } catch(e) {
          console.warn('Failed to parse JSON data', data);
          page.images = [];
        }
      });
      phantom.on('exit', function(code) {
        var err = null;
        if (code > 0) {
          err = new Error('Phantom exited with code ' + code);
        } else {
          console.log('%s images found in %s', page.images.length, page.path);
        }
        callback(err, pageList);
      });
    }

    async.eachSeries(pageList, getImageSizes, next);
  },
  function getActualImageSizes(next) {

    function getImageSize(image, callback) {
      var filePath = WWW_ROOT + image.src;
      fs.readFile(filePath, function(err, buf) {
        if (err) {
          // Silently skip image if we cannot get the image size
          console.warn('Failed to read image %s', filePath);
          return callback(null);
        }
        var info = imageinfo(buf);
        imageList.push({
          src: image.src,
          width: info.width,
          height: info.height,
          size: buf.length
        });
        callback(err);
      });
    }

    function processPage(page, callback) {
      async.eachSeries(page.images, getImageSize, callback);
    }

    async.eachSeries(pageList, processPage, next);
  },
  function generateImages(next) {

    function processPage(page, callback) {
      async.eachSeries(page.images, generateImage, callback);
    }
    async.eachSeries(pageList, processPage, next);
  },
  function updatePageHTML(next) {

    function updatePage(page, callback) {
      if (page.images.length === 0) {
        return callback(null);
      }
      async.waterfall([
        function getPageHTML(cb) {
          hideContentBelowFold(page, cb);
        },
        function getWindow(html, cb) {
          jsdom.env({
            html: html,
            features: { QuerySelector: true, FetchExternalResources: false, ProcessExternalResources: false },
            done: cb
          });
        },

        function updateImages(window, cb) {
          var doc = window.document,
              imageNodes = doc.querySelectorAll('img'),
              pageImage = null;
          for (var i=0; i < imageNodes.length; i++) {
            pageImage = page.images[i];
            if (isReplaceRequired(pageImage)) {
              imageNodes[i].setAttribute('src', pageImage.newPath);
              console.log('Changing image from %s to %s in %s', pageImage.src, pageImage.newPath, page.path);
            }
          }
          var html = doc.innerHTML;
          window.close();
          cb(null, html);
        },
        function save(html, cb) {
          fs.writeFile(page.path, html, cb);
        }
      ], callback);
    }

    async.eachSeries(pageList, updatePage, next);
  }
],
  function(err) {
    if (err) {
      console.error(err);
    }
    console.log('Complete');
    process.exit();
  }
);
