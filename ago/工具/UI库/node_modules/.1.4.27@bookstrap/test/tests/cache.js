define([
  'Bookstrap.Core',
  'Bookstrap.PageCollection',
  'Bookstrap.Page',
  'Bookstrap.DOMPage'
  ],
  function(Bookstrap, PageCollection, Page, DOMPage) {

    var bookstrapEmitSpy;

    beforeEach(function(done) {
      window.bookstrap = new Bookstrap();

      bookstrapEmitSpy = sinon.spy(bookstrap, 'emit');
      bookstrapEmitSpy.withArgs('pagecache');
      bookstrapEmitSpy.withArgs('pageload');
      bookstrapEmitSpy.withArgs('navigationcached');

      bookstrap.on('navigationcached', function() {
        done();
      });
      bookstrap.init();
    });

    describe('Caching after moving page', function (done) {

      it('navigationcached is emitted after each page load', function (done) {
        var numPages = bookstrap.pages.length;
        bookstrap.on('navigationcached', function(domPage) {
          if (bookstrapEmitSpy.withArgs('navigationcached').callCount < numPages) {
            bookstrap.moveNext();
          } else {
            expect(bookstrap.getCurrentPageIndex()).to.eql(numPages-1);
            done();
          }
        });
        bookstrap.moveNext();
      });

      it('DOM Nodes are reused when moving next', function (done) {
        
        var page1DomNode = bookstrap.domPages.current.el;

        bookstrap.on('navigationcached', function() {
          if (bookstrapEmitSpy.withArgs('navigationcached').callCount === 2) {
            
            expect(bookstrap.getCurrentPageIndex()).to.eql(1);
            var leftCachedNode = bookstrap.domPages.current.el.previousElementSibling;
            expect(page1DomNode).not.to.equal(undefined);
            expect(leftCachedNode).to.eql(page1DomNode);
            done();
          }
        });

        bookstrap.moveNext();
      });

      it('Correct pages are cached when moving to the last page', function (done) {
        
        bookstrap.on('navigationcached', function() {
          if (bookstrapEmitSpy.withArgs('navigationcached').callCount === 2) {
            
            var secondToLastPage = bookstrap.pages.get(bookstrap.pages.length-2);
            expect(bookstrap.domPages.getLeftDOMPage().page).to.equal(secondToLastPage);
            expect(bookstrap.domPages.getRightDOMPage().page).to.equal(undefined);
            done();
          }
        });

        bookstrap.navigate(bookstrap.pages.getLast().href);
      });

      it('Correct pages are cached when moving to the second page', function (done) {
        
        bookstrap.on('navigationcached', function() {
          if (bookstrapEmitSpy.withArgs('navigationcached').callCount === 2) {
            
            var firstPage = bookstrap.pages.getFirst(),
                thirdPage = bookstrap.pages.get(2);
            expect(bookstrap.domPages.getLeftDOMPage().page).to.equal(firstPage);
            expect(bookstrap.domPages.getRightDOMPage().page).to.equal(thirdPage);
            done();
          }
        });

        bookstrap.navigate(bookstrap.pages.get(1).href);
      });

      it('Correct 3 pages to be cached', function (done) {
        
        bookstrap.on('pagecache', function() {
          if (bookstrapEmitSpy.withArgs('pagecache').callCount === 3) {
            
            var page1 = bookstrap.pages.get(0),
                page2 = bookstrap.pages.get(1),
                page3 = bookstrap.pages.get(2);

            expect(bookstrap.domPages.findNodeByPageLoaded(page1)).to.be.a(DOMPage);
            expect(bookstrap.domPages.findNodeByPageLoaded(page2)).to.be.a(DOMPage);
            expect(bookstrap.domPages.findNodeByPageLoaded(page3)).to.be.a(DOMPage);
            done();
          }
        });
        bookstrap.moveNext();
      });

    });

  }
);
