/*global bookstrap: false */
define([
  'underscore'
  ],
  function(_) {

  var BookstrapNavigation = function(config) {
    _.bindAll(this);

    config = config || {};
    this.openExternalLinksInNewWindow = config.openExternalLinksInNewWindow || false;
    this.linkRelHanders = {};

    // TODO: Handle tap event.
    // This doesn't work just by changing to tap since preventDefault is not called on the click handler
    $(document).on('click', 'a', this.handleLinkTap);
  };

  BookstrapNavigation.prototype.handleLinkTap = function(event) {
    var preventDefault = true,
        isInternalLink = false,
        href = event.currentTarget.getAttribute('href'),
        rel = event.currentTarget.getAttribute('rel'),
        link = event.currentTarget;

    if (typeof(rel) === 'string' && this.hasRelHander(rel)) {
      this.handleLink(href, rel, link);

    } else if (typeof(href) !== 'string') {
      console.error('Invalid link, no href attribute');

    } else if (href.match(/^#/)) {
      // Matches an anchor link
      var target = $(href),
          scrollContainer = bookstrap.domPages.current.$el;
      this.smoothScrollTo(scrollContainer, target.offset().top, 500);
      return false;
    } else if (href.match(/^http/i) !== null) {
      // Matched an external link
      var target;
      if (this.openExternalLinksInNewWindow) {
        target = '_blank';
      }
      window.open(href, target);
    } else if (href.match(/:/) !== null) {
      // Matches mailto: or myapp:// or anyother valid URI.
      preventDefault = false;

    } else {
      isInternalLink = true;
    }

    if (preventDefault)
      event.preventDefault();

    if (isInternalLink)
      bookstrap.navigate(href);
  };

  BookstrapNavigation.prototype.smoothScrollTo = function(element, to, duration) {
    if (!duration) return;

    var self = this,
        distance = to - element.scrollTop(),
        tick = 10,
        perTick = distance / duration * tick;

    this.scrollToTimer = setTimeout(function() {
      if (!isNaN(parseInt(perTick, tick))) {
        element.scrollTop(element.scrollTop() + perTick);
        self.smoothScrollTo(element, to, duration - tick);
      }
    }, tick);
  };

  BookstrapNavigation.prototype.hasRelHander = function(rel) {
    return this.linkRelHanders[rel] !== undefined;
  };

  BookstrapNavigation.prototype.setLinkHandler = function(rel, cb) {
    this.linkRelHanders[rel] = cb;
  };

  BookstrapNavigation.prototype.handleLink = function(href, rel, link) {
    if (this.hasRelHander(rel))
      this.linkRelHanders[rel](href, rel, link);
  };

  return BookstrapNavigation;
});