/*global bookstrap: false */
/* INFORMATION:
The script inserts data to any <span> element in the quiz element tree that have the following classes:
  DISPLAY_QUESTION_COUNT_CLASS = Total questions
  DISPLAY_CORRECT_COUNT_CLASS = Correctly answers given
  DISPLAY_INCORRECT_COUNT_CLASS = Incorrect answers given
*/

define(['underscore'],
  function(_) {
      	var 				QUIZ_CLASS = 'book-quiz',
    				  QUIZ_INTRO_CLASS = 'book-quiz-intro',
    					    RESULT_CLASS = 'book-quiz-result',
    					  QUESTION_CLASS = 'book-quiz-question',
    		QUESTION_CORRECT_CLASS = 'book-quiz-question-correct',
 QUESTION_CORRECT_ANSWER_CLASS = 'show-icon-correct',
 		  QUESTION_INCORRECT_CLASS = 'show-icon-incorrect',
       					 COUNTER_CLASS = 'book-quiz-question-counter',
          COUNTER_ACTIVE_CLASS = 'active-question-number',
    				   LINK_NEXT_CLASS = 'next',
        					 	TOUCHEVENT = undefined,
             CORRECT_ANIMATION = {background: 'rgb(228, 255, 224)', border: '5px solid green'},
           INCORRECT_ANIMATION = {background: 'rgb(255, 230, 230)', border: '5px solid red'},
  DISPLAY_QUESTION_COUNT_CLASS = 'display-number-of-questions',
   DISPLAY_CORRECT_COUNT_CLASS = 'display-correct-answers',
 DISPLAY_INCORRECT_COUNT_CLASS = 'display-incorrect-answers';

  	/* Quiz Object */
  	var Quiz = function(el, domPage){
  		this.$el = el;
      this.$intro = this.getIntroElement();
      this.$questions = this.getQuestionElements();
      this.$answers = this.getAnswerElements();
      this.$result = this.getResultElement();
      this.$counter = undefined;
  		this.totalQuestions = this.$questions.length;
  		this.incorrectAnswers = 0;
  		this.correctAnswers = 0;
  		this.currentQuestion = 0;

      try{
        this.init(); 
      }catch(error){
        console.log(error.toString());
      }
  		 		
  	};

    /* Quiz object functions */
  	Quiz.prototype = {
  		init: function(){
        this.updateVisibleQuizData();
  			this.bindEvents();
        $(this.$el).attr('data-initialized', 'true');
  		},

      getIntroElement: function(){
        var self = this;
        var headerElements = self.$el.getElementsByTagName('header');  
             
        return headerElements[0];
      },

      getQuestionElements: function(){
        var self = this;
        var questionElements = [];
        var liElements = self.$el.getElementsByTagName('li');
        $.each( liElements, function(){
          if( this.className == QUESTION_CLASS ){
            questionElements.push(this);
          }
        });

        return questionElements;
      },

      getAnswerElements: function(){
        var self = this;
        var answerElements = [];

        $.each( self.$questions, function( questionId, questionElement){
          $.each( questionElement.getElementsByTagName('li'), function(){
            answerElements.push(this);
          });          
        });
        
        return answerElements;

      },

      getResultElement: function(){
        var self = this,
            resultElement;

        $.each( self.$el.getElementsByTagName('div'), function(){
          if( this.className == RESULT_CLASS ){
            resultElement = this;
            return false;
          }
        });

        return resultElement;
      },
      
  		bindEvents: function(){
  			var self = this;
        self.bindNextLinks(self);

        /* Bind functionality to answers */
        $.each(self.$answers, function( answerIndex, answerElement){

          if( answerElement.className == QUESTION_CORRECT_CLASS )
            self.bindCorrectAnswer(answerElement, self);
          else
            self.bindIncorrectAnswer(answerElement, self);             
          
                     
        });

  		},

      bindNextLinks: function(quizElement){
        var self = this;
        var nextLinks = self.$el.getElementsByTagName('a');
        $.each( nextLinks, function(linkId, linkEl){

          if( linkEl.className == LINK_NEXT_CLASS ){
            $(linkEl).unbind(TOUCHEVENT);

            $(linkEl).bind(TOUCHEVENT, function(event){
              event.preventDefault();              
              self.updateVisibleQuizData(); /* update the spans to show new data, then go to next question */
              self.nextQuestion();            
            });

          }

        });
      },

      bindCorrectAnswer: function(el, self){        
        $(el).bind(TOUCHEVENT, function(event){
          event.preventDefault();
          self.unbindAnswers($(this).parent()[0]);
          $(this).toggleClass(QUESTION_CORRECT_ANSWER_CLASS);
          $(this).animate(CORRECT_ANIMATION, 500);
          self.correctAnswers++;
          self.showNextLink(this, self);
                    
        });
      },

      bindIncorrectAnswer: function(el, self){
        $(el).bind(TOUCHEVENT, function(event){
          event.preventDefault();
          self.unbindAnswer(this);          
          $(this).toggleClass(QUESTION_INCORRECT_CLASS);
          $(this).animate(INCORRECT_ANIMATION, 500);
          self.incorrectAnswers++;
        });       
      },

      unbindAnswer: function(answerEl){
        $(answerEl).unbind(TOUCHEVENT);
      },

      unbindAnswers: function(answersContainerElement){
        /* for 1 set of answers */
        var answers = answersContainerElement.getElementsByTagName('li');
        $.each( answers, function(){
          $(this).unbind(TOUCHEVENT);
        });

      },

      showNextLink: function(el, self){
        var nextLinkHTML = '<a href="#" class="next"></a>'
        $(el).parent().append(nextLinkHTML);
        self.bindNextLinks();        
      },

  		nextQuestion: function(){
        var self = this;

        if( self.currentQuestion == 0 ){
          $(self.$intro).hide();
          $(self.$questions[self.currentQuestion]).show();
          self.initCounter();

        }else if( self.currentQuestion < self.totalQuestions ){
          $(self.$questions[self.currentQuestion - 1]).hide();
          $(self.$questions[self.currentQuestion]).show(); 

        }else{
          $(self.$questions[self.currentQuestion - 1]).hide();
          $(self.$counter).hide();
          $(self.$result).show();
        }

        
        var counterLiElements = self.$counter.getElementsByTagName('li');
        $.each( counterLiElements, function( liId, liElement){
          if( liId == self.currentQuestion )
            liElement.className = COUNTER_ACTIVE_CLASS;
          else
            liElement.className = '';
        });

        self.currentQuestion++;       
  		},

      initCounter: function(){
        var self = this;
        $(self.$el).append('<ol class="book-quiz-question-counter"></ol>');
        var olElements = self.$el.getElementsByTagName('ol');

        $.each( olElements, function(){
          if( this.className == COUNTER_CLASS){
            self.$counter = this;
            return false;
          }
        });
        
        for(var i=0; i<self.totalQuestions; i++){
          $(self.$counter).append('<li>' + (i + 1)  + '</li>'); 
        };
      },

      updateVisibleQuizData: function(){
        /* Loop through the span elements in the quiz and insert data if class matches */
        var self = this,
            spanElements = self.$el.getElementsByTagName('span');
        $.each(spanElements, function(spanId, spanElement){
          switch(spanElement.className){
            case DISPLAY_QUESTION_COUNT_CLASS:
            $(spanElement).text(self.totalQuestions.toString());
              break;

            case DISPLAY_CORRECT_COUNT_CLASS:
            $(spanElement).text(self.correctAnswers.toString());
              break;

            case DISPLAY_INCORRECT_COUNT_CLASS:
            $(spanElement).text(self.incorrectAnswers.toString());
              break;
          };
        });
      }
  	};

    /* On start make an array we keep our quiz objects in */
    /* and bind startup events */
  	var QuizPlugin = function(){
  		this.$el = null;
  		this.quizGroup = [];
  		bookstrap.on('pageload', _.bind(this.setup, this));
  	};

  	QuizPlugin.prototype = {

  		setup: function(domPage) {
  			var self = this;
        TOUCHEVENT = (bookstrap.hasTouchSupport) ? "touchstart" : "click";
        var divs = domPage.$el[0].getElementsByTagName('div');
        $.each(divs, function(divId, divElement){
          if( divElement.className == QUIZ_CLASS && $(divElement).attr('data-initialized') != 'true'){
            self.quizGroup.push(new Quiz(divElement, domPage));
          }
            
        });
  		}
  	};

  	return QuizPlugin;
  });