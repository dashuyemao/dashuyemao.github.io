define([
  'underscore',
  'plugins/Bookstrap.Mask'
  ],
  function(_, Mask) {
    var CUSTOM_ZOOMABLE_CLASS = 'tap-to-enlarge',
        THRESHOLD = 1.2,
        ZOOM_SPEED = 1000;

    var MASK_CLASS = 'book-image-zoom-mask',
        ZOOMED_CLASS = 'book-image-zoomed';

    var ImageZoom = function(bookstrap) {
      this.mask = new Mask({customClass: MASK_CLASS});
      this.mask.addCloseEvent('doubletap');
      this.mask.onClose = _.bind(this.hideZoomed, this);
      this.zoomEnabled = typeof(bookstrap.config.imageZoomEnabled) === 'boolean' ?
                            bookstrap.config.imageZoomEnabled : true;
      this.pageZoomEnabled = this.zoomEnabled;

      bookstrap.on('pageload', _.bind(this.onPageLoad, this));
      bookstrap.on('resize', _.bind(this.onResize, this));
    };

    ImageZoom.prototype.onPageLoad = function(domPage) {
      if (domPage.imageZoomEventsBound) {
        return;
      }
      this.pageZoomEnabled = this.zoomEnabled || domPage.$el.find('article.tap-to-enlarge-image').length > 0;
      domPage.$el.hammer().on('doubletap', 'figure>img', _.bind(this.onDoubleTap, this));
      domPage.imageZoomEventsBound = true;
    };

    ImageZoom.prototype.onDoubleTap = function(event) {
      var image = $(event.target),
          figureZoomEnabled = image.parent('figure.' + CUSTOM_ZOOMABLE_CLASS).length > 0,
          imageSizeOverThreshold = (image.prop('naturalWidth') > (THRESHOLD * image.width()) ||
                                    image.prop('naturalHeight') > (THRESHOLD * image.height()));
      if (figureZoomEnabled || (this.pageZoomEnabled && imageSizeOverThreshold)) {
        this.showZoomed(image);
      }
      return false;
    };

    ImageZoom.prototype.onResize = function() {
      if (this.mask.$el) {
        var image = this.mask.$el.find('img.' + ZOOMED_CLASS);
        if (image.length) {
          var zoomedPos = this.fitToViewport({
            width: image.width(),
            height: image.height()
          });
          image.css(zoomedPos, ZOOM_SPEED/2, 'ease-in-out');
        }
      }
    };

    ImageZoom.prototype.showZoomed = function(srcImage) {
      var self = this,
          image = srcImage.clone(),
          originalPos = srcImage[0].getBoundingClientRect();

      self.mask.show();
      self.mask.$el.html(image);

      image.css(originalPos);
      image.css({
        'transition': ZOOM_SPEED + 'ms',
        '-webkit-transform': 'translate3d(0,0,0)',
        'transition-timing-function': 'ease-in-out'
      });
      srcImage.addClass(ZOOMED_CLASS);

      var viewportSize = {
            width: bookstrap.viewport.width,
            height: bookstrap.viewport.height
          };

      var zoomedPos = this.fitToViewport({
        width: srcImage.prop('naturalWidth'),
        height: srcImage.prop('naturalHeight')
      });

      image.css(zoomedPos);

      image.addClass(ZOOMED_CLASS);
    };

    ImageZoom.prototype.hideZoomed = function() {
      var self = this,
          image = this.mask.$el.find('img.' + ZOOMED_CLASS),
          srcImage = $('img.' + ZOOMED_CLASS);

      image.css( srcImage[0].getBoundingClientRect());
      image.css({
        'transition': ZOOM_SPEED + 'ms',
        'transition-timing-function': 'ease-in-out'
      });

      var animate = function(){
          self.mask.hide();
          self.mask.$el.html('');
          srcImage.removeClass(ZOOMED_CLASS);
      };

      _.delay(animate, ZOOM_SPEED);

    };

    ImageZoom.prototype.fitToViewport = function(imageSize) {
      var viewportSize = {
            width: bookstrap.viewport.width,
            height: bookstrap.viewport.height
          },
          viewportPos = bookstrap.viewport.$el.offset(),
          resultSize = {
            width: imageSize.width,
            height: imageSize.height,
            top: viewportPos.top + (viewportSize.height - imageSize.height) / 2,
            left: viewportPos.left + (viewportSize.width - imageSize.width) / 2
          };

      if (imageSize.height < viewportSize.height && imageSize.width < viewportSize.width) {
        return resultSize;
      }

      if (viewportSize.width != resultSize.width) {
        resultSize.height = imageSize.height * (viewportSize.width / imageSize.width)
        resultSize.width = viewportSize.width;
      }

      if (resultSize.height > viewportSize.height) {
        resultSize.width = imageSize.width * (viewportSize.height / imageSize.height);
        resultSize.height = viewportSize.height;
      }

      resultSize.top = viewportPos.top + (viewportSize.height - resultSize.height) / 2;
      resultSize.left = viewportPos.left + (viewportSize.width - resultSize.width) / 2;
      return resultSize;
    };

    return ImageZoom;
});