/* global bookstrap: false */
define([
  'underscore',
  'plugins/Bookstrap.Scroller',
  'Bookstrap.DOMPage'
  ],
  function(_, BookstrapScroller, BookstrapDOMPage) {

    var BookstrapSwipe = function() {
      this.scrollers = [];
      this.centerDOMPage = null;
      this.neighborDOMPage = null;
      this.scrollerOptions = {
        snapBoundary: 30,
        scrollResponseBoundary: 10,
        animationDuration: 150,
        width: bookstrap.viewport.width
      };

      this._preventUserInput = false;

      bookstrap.moveToDOMPage = _.bind(this.moveToDOMPage, this);
      bookstrap.on('pagecreated', _.bind(this.onPageCreated, this));
      bookstrap.on('ready', _.bind(this.init, this));
      bookstrap.on('resize', _.bind(this.onResize, this));
    };

    BookstrapSwipe.prototype.init = function() {
      if (bookstrap.domPages.getLength() !== 3) {
        console.error('3 DOM Pages expected');
        return;
      }
      this.setCenterDOMPage(bookstrap.domPages.getCenterDOMPage());
      this.updateCanMoveNextPrevious();
      this.bindUserEvents();
    };

    BookstrapSwipe.prototype.bindUserEvents = function() {
      var moveStartEvents = [],
          moveEvents = [],
          moveEndEvents = [],
          hasTouchSupport = bookstrap.hasTouchSupport,
          // We should find a better way to decide if we should support mouse
          // gestures, since some devices have mouse and touch support
          hasMouseSupport = ! hasTouchSupport;
      if (hasTouchSupport) {
        moveStartEvents.push('touchstart');
        moveEvents.push('touchmove');
        moveEndEvents.push('touchend', 'touchcancel');
      }
      if (hasMouseSupport) {
        moveStartEvents.push('mousedown');
        moveEvents.push('mousemove');
        moveEndEvents.push('mouseup');
      }
      bookstrap.viewport.$el.on(moveStartEvents.join(' '), $.proxy(this.onMoveStart, this));
      bookstrap.viewport.$el.on(moveEvents.join(' '), $.proxy(this.onMove, this));
      bookstrap.viewport.$el.on(moveEndEvents.join(' '), $.proxy(this.onMoveEnd, this));

      // Prevent dragging of images
      bookstrap.viewport.$el.on('dragstart', 'img', function(){
        return false;
      });
    };

    BookstrapSwipe.prototype.bindScrollerEvents = function() {
      this.centerDOMPage.scroller.on('scroll', $.proxy(this.onPageScroll, this));
      this.centerDOMPage.scroller.on('animationstart', $.proxy(this.disableUserInput, this));
      this.centerDOMPage.scroller.on('snap', $.proxy(this.onPageSnap, this));
    };

    BookstrapSwipe.prototype.unbindScrollerEvents = function() {
      if (! this.centerDOMPage) return;
      this.centerDOMPage.scroller.removeAllListeners('scroll');
      this.centerDOMPage.scroller.removeAllListeners('animationstart');
      this.centerDOMPage.scroller.removeAllListeners('snap');
    };

    BookstrapSwipe.prototype.enableUserInput = function(viewport) {
      this._preventUserInput = false;
    };

    BookstrapSwipe.prototype.disableUserInput = function(viewport) {
      this._preventUserInput = true;
    };

    BookstrapSwipe.prototype.onResize = function(viewport) {
      this.resizePages();
    };

    BookstrapSwipe.prototype.resizePages = function() {
      bookstrap.domPages.forEach(function(domPage) {
        domPage.scroller.setWidth(bookstrap.viewport.width);
      });
    };

    BookstrapSwipe.prototype.onPageCreated = function(domPage) {
      var scroller = new BookstrapScroller(
                                          domPage,
                                          this.scrollerOptions);
      domPage.scroller = scroller;
    };

    BookstrapSwipe.prototype.onMoveStart = function(event) {
      if (! this._preventUserInput && ! event.bookstrapTouchStartListener)
        this.centerDOMPage.scroller.onMoveStart(event);
    };

    BookstrapSwipe.prototype.onMove = function() {
      if (! this._preventUserInput)
        this.centerDOMPage.scroller.onMove(event);
    };

    BookstrapSwipe.prototype.onMoveEnd = function() {
      if (! this._preventUserInput)
        this.centerDOMPage.scroller.onMoveEnd(event);
    };

    BookstrapSwipe.prototype.moveToDOMPage = function(domPage) {
      this.setCenterDOMPage(bookstrap.domPages.getCenterDOMPage());
      this.updateScrollerPositions();
      this.updateCanMoveNextPrevious();
    };

    BookstrapSwipe.prototype.updateScrollerPositions = function() {
      bookstrap.domPages.forEach(function(domPage) {
        domPage.scroller.updatePosition({ silent: true });
      });
    };

    BookstrapSwipe.prototype.updateCanMoveNextPrevious = function() {
      this.centerDOMPage.scroller.canMoveNext = bookstrap.hasNext();
      this.centerDOMPage.scroller.canMovePrevious = bookstrap.hasPrevious();
    };

    BookstrapSwipe.prototype.onPageScroll = function(swipeDirection, distance) {
      this.setNeighbor(swipeDirection);
      this.neighborDOMPage.scroller.setScrollPosition(this.getNeighborOffset(), { silent: true });
    };

    BookstrapSwipe.prototype.setNeighbor = function(swipeDirection) {
      var scrollerPosition = swipeDirection * -1;
      if (! this.neighborDOMPage) {
        this.neighborDOMPage = bookstrap.domPages.findByPosition(scrollerPosition);
      }
      var notMovedToCenter = scrollerPosition !== BookstrapDOMPage.POSITION_CENTER;
      var hasNeighborChanged = this.neighborDOMPage.position !== scrollerPosition;
      if (notMovedToCenter && hasNeighborChanged) {
        this.neighborDOMPage = bookstrap.domPages.findByPosition(scrollerPosition);
      }
    };

    BookstrapSwipe.prototype.getNeighborOffset = function() {
      return this.centerDOMPage.scroller.getScrollPosition() +
              (bookstrap.viewport.width * this.neighborDOMPage.position);
    };

    BookstrapSwipe.prototype.onPageSnap = function(swipeDirection) {
      this.updateScrollerPositionsAfterSwipe(swipeDirection);
      if (bookstrap.domPages.current !== this.centerDOMPage) {
        bookstrap.domPages.setCurrentDOMPage(this.centerDOMPage);
        this.updateCanMoveNextPrevious();
      }
      this.enableUserInput();
    };

    BookstrapSwipe.prototype.updateScrollerPositionsAfterSwipe = function(swipeDirection) {
      var moveScroller = bookstrap.domPages.findByPosition(swipeDirection),
          newcenterDOMPage = bookstrap.domPages.findByPosition(swipeDirection * -1),
          oldcenterDOMPage = this.centerDOMPage;

      newcenterDOMPage.scroller.setPosition(BookstrapDOMPage.POSITION_CENTER, { silent: true });
      oldcenterDOMPage.scroller.setPosition(swipeDirection, { silent: true });
      moveScroller.scroller.setPosition(swipeDirection * -1, { silent: true });

      this.setCenterDOMPage(newcenterDOMPage);
    };

    BookstrapSwipe.prototype.setCenterDOMPage = function(domPage) {
      this.unbindScrollerEvents();
      this.centerDOMPage = domPage;
      this.bindScrollerEvents();
    };

    return BookstrapSwipe;
});