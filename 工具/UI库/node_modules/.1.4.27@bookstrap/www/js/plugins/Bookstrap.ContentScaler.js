/*global bookstrap: false */
define([
  'underscore'
  ],
  function(_) {

    var Content = function(el) {
      _.bindAll(this);

      this.$el = $(el);
      this.$figure = this.$el.prev('figure');
      this.$img = this.$figure.find('img');

      if (this.$el.length === 1 && this.$figure.length === 1)
        this.init();
    };

    Content.prototype = {

      init: function() {
        this.bindEvents();
        var isImageAlreadyLoaded = this.$img[0].width && this.$img[0].height;
        if (isImageAlreadyLoaded) {
          this.onWindowResize();
        }
      },

      bindEvents: function() {
        bookstrap.on('resize', this.onWindowResize);
        this.$img.on('load', this.onWindowResize);
      },

      unbindEvents: function() {
        bookstrap.removeListener('resize', this.onWindowResize);
        this.$img.off('load', this.onWindowResize);
      },

      resizeContent: function() {
        var scale        = this.$img.width() / this.$el.data('natural-width'),
            offsetParent = this.$el[0].offsetParent;

        this.$el.css({
          'left': (this.$figure[0].offsetLeft + this.$img[0].offsetLeft),
          'top':  (this.$figure[0].offsetTop + this.$img[0].offsetTop),
          // Scale the content to match the scaled figure
          'transform': 'scale(' + scale + ')',
          '-webkit-transform': 'scale(' + scale + ')',
        });
      },

      onWindowResize: function() {
        this.resizeContent();
      }
    };

    // based on Content
    var ScaledFigure = function(el) {
      _.bindAll(this);

      this.$el = $(el);
      this.$img = this.$el.find('img');
      this.init();
    };

    ScaledFigure.prototype = _.extend({}, Content.prototype, {
      onWindowResize: function(event) {
        this.$el.css('height', window.innerHeight);
      }
    });

    var ContentScaler = function() {
      this.contentObjects = [];
      this.figureObjects  = [];

      _.bindAll(this);
      bookstrap.on('pageload', this.onPageLoad);
      bookstrap.on('pageunload', this.onPageUnload);
    };

    ContentScaler.prototype = {

      onPageLoad: function(domPage) {
        var self = this;

        domPage.$el.find('.book-fit-to-screen').each(function() {
          self.figureObjects.push(new ScaledFigure(this, domPage));
        });

        domPage.$el.find('.book-scale-content').each(function() {
          var el = this;
          self.contentObjects.push(new Content(el, domPage));
        });
      },

      onPageUnload: function(page) {
        this.contentObjects.forEach(function(obj) {
          obj.unbindEvents();
        });

        _.invoke(this.figureObjects, 'unbindEvents');

        this.contentObjects.length = 0;
        this.figureObjects.length  = 0;
      }
    };

    return ContentScaler;
});
