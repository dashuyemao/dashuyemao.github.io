define([
  'underscore'
],
function(_) {
  var Drawer = function(bookstrap, el, mask) {
    _.bindAll(this);
    this.isOpen = false;
    this.$el = $(el);

    this.mask = mask;
    var closeGestures = {
      'left': 'swipeleft',
      'bottom': 'swipedown',
      'right': 'swiperight'
    };

    this.mask.addCloseEvent(closeGestures[this.$el.attr('data-book-drawer-position')]);
    this.mask.onClose = this.close;

    bookstrap.on('pageload', this.activateCurrentPage);

    var self = this;
    // Reduce delay on touch-enabled devices
    this.$el.hammer().on('tap', '.book-drawer-handle', function(e){
      self.toggle();
    });

    this.$el.on('click', '.book-drawer-content a', this.close);
  };

  Drawer.prototype.activateCurrentPage = function(page) {
    this.$el
      .find('li.book-drawer-page-active')
      .removeClass('book-drawer-page-active');
    this.$el
      .find('a[href="' + page.page.href + '"]')
      .parent().addClass('book-drawer-page-active');
  };

  Drawer.prototype.toggle = function() {
    return this.isOpen ?  this.close() : this.open();
  };

  Drawer.prototype.open = function(event) {
    if (this.isOpen)
      return;

    this.isOpen = true;
    this.mask.show();

    var self = this;
    // unlock touch interaction when drawer is open, but not sooner as 300ms
    // bear in mind that hammerjs' e.* and e.gesture.* methods 
    // won't work with the current dom structure
    window.setTimeout(function(){
      self.$el.find('.book-drawer-content ol').css('pointer-events', 'all');
    }, 500);

    this.$el.attr('data-book-drawer-state', 'open');
    return false;
  };

  Drawer.prototype.close = function(event) {
    var self = this;
    if (!this.isOpen)
      return;

    this.preventBodyBounce(true);

    // delay hiding mask to let the drawer close animation finish before allowing interactions with pages
    this.$el.attr('data-book-drawer-state', 'closed');
    window.setTimeout(function(){
      // lock ui when list view is no longer used
      self.$el.find('.book-drawer-content ol').css('pointer-events', 'none');
      self.isOpen = false;
      self.mask.hide();
      self.preventBodyBounce(false);
    }, 500);
  };

  Drawer.prototype.preventBodyBounce = function(active) {
    if (!bookstrap.hasTouchSupport)
      return;

    var touchEvent = 'touchstart',
        onBodyTouchStart = function(event) {
          event.preventDefault();
          event.stopPropagation();
        };

    if (active) {
      $('body').on(touchEvent, onBodyTouchStart);
    } else {
      $('body').off(touchEvent);
    }
  };

  return Drawer;
});
