define([
  'underscore',
  'lib/events',
  'Bookstrap.Navigation',
  'Bookstrap.PageCollection',
  'Bookstrap.Page',
  'Bookstrap.DOMPage',
  'Bookstrap.DOMPageCollection'
  ],
  function(
    _,
    EventEmitter,
    BookstrapNavigation,
    BookstrapPageCollection,
    BookstrapPage,
    BookstrapDOMPage,
    BookstrapDOMPageCollection) {

  var Bookstrap = function(config) {
    config = config || {};
    this.config = _.defaults(config, {
      basePath: '',
      navPath: '../nav.html',
      openExternalLinksInNewWindow: true,
      startPageIndex: 0,
      viewport: '#bookstrap-viewport'
    });

    var viewportEl = $(this.config.viewport);

    this.viewport = {
      height: null,
      width: null,
      el: viewportEl[0],
      $el: viewportEl
    };

    // does not change once page is loaded
    this.hasTouchSupport = 'ontouchstart' in window;

    this.$nav = null;
    this.navigation = new BookstrapNavigation({
      openExternalLinksInNewWindow: this.config.openExternalLinksInNewWindow
    });
    this.pages = new BookstrapPageCollection(this.viewport.$el);
    this.domPages = new BookstrapDOMPageCollection({
      pages: this.pages,
      $pagesContainer: this.viewport.$el
    });

    _.bindAll(this);
    this.onWindowResize = _.debounce(this.onWindowResize, 300);

    this.updateViewPortSize();
  };

  Bookstrap.prototype = new EventEmitter();

  Bookstrap.prototype.init = function() {
    console.log('Initialising Bookstrap with config', this.config);
    var self = this;

    require(['text!' + this.config.navPath], function(navHTML) {
      self.title = self.titleFromHTML(navHTML);
      self.domPages.init();
      self.loadPageList(navHTML);
      self.resizeViewPort();
      self.loadPageByIndex(self.config.startPageIndex);
      self.bindEvents();
      self.emit('ready');

      var readyEvent = document.createEvent('Event');
      readyEvent.initEvent('bookstrapready', true, true);
      document.dispatchEvent(readyEvent);
    });
  };

  Bookstrap.prototype.bindEvents = function() {
    $(window).on('resize', this.onWindowResize);
    this.navigation.setLinkHandler('next', this.moveNext);
    this.navigation.setLinkHandler('previous', this.movePrevious);
    this.navigation.setLinkHandler('first', this.moveFirst);
    this.navigation.setLinkHandler('last', this.moveLast);
  };

  Bookstrap.prototype.onWindowResize = function() {
    this.updateViewPortSize();
    this.resizeViewPort();
    this.emit('resize', this.viewport);
  };

  Bookstrap.prototype.updateViewPortSize = function() {
    this.viewport.width = document.documentElement.clientWidth;
    this.viewport.height = document.documentElement.clientHeight;
  };

  Bookstrap.prototype.resizeViewPort = function() {
    this.viewport.$el
      .width(this.viewport.width)
      .height(this.viewport.height);
  };

  Bookstrap.prototype.loadPageList = function(navHTML) {
    var self = this;
    this.$nav = $(BookstrapDOMPage.extractBodyContents(navHTML)).closest('nav');
    this.$nav.hide();
    $('body').append(this.$nav);
    this.$nav.find('li').each(function(i, el) {
      var link = el.firstChild;

      var page = new BookstrapPage({
        href: $(link).attr('href').toLowerCase(),
        title: $(link).text()
      });
      $.each(link.attributes, function(i, attr){
        if (attr.name.indexOf('data-') === 0)
          page[attr.name.substr(5)] = attr.value;
      });
      self.pages.push(page);
    });
    this.emit('navloaded', this.pages);
  };

  Bookstrap.prototype.loadPage = function(page) {
    if (! (page instanceof BookstrapPage)) {
      throw 'Invalid argument calling loadPage()';
    }
    return this.domPages.setCurrentPage(page);
  };

  Bookstrap.prototype.loadPageByIndex = function(index) {
    var page = this.pages.get(index);
    if (! page) {
      console.warn('No page found at index ' + index);
      return;
    }
    return this.loadPage(page);
  };

  // This method can be overridden by a more complex implementation
  Bookstrap.prototype.moveToDOMPage = function(domPage) {
    var right = this.domPages.getRightDOMPage(),
        left = this.domPages.getLeftDOMPage();
    if (left)
      left.$el.hide();
    if (left)
      right.$el.hide();
    domPage.$el.attr('style', '-webkit-transform: translate3d(0px, 0, 0); -moz-transform: translate3d(0px, 0, 0); transform: translate3d(0px, 0, 0); display: block');
  };

  Bookstrap.prototype.moveToPage = function(page) {
    if (typeof(page) === 'number') {
      this.loadPageByIndex(page);
    } else if (page instanceof BookstrapPage) {
      this.loadPage(page);
    } else if (page instanceof BookstrapDOMPage) {
      this.moveToDOMPage(page);
    } else {
      throw 'Cannot move to page. Invalid argument';
    }
  };

  Bookstrap.prototype.setCurrentDOMNodeByIndex = function(domNodeIndex) {
    this.domPages.setCurrentByIndex(domNodeIndex);
  };

  Bookstrap.prototype.moveNext = function() {
    if (this.hasNext()) {
      this.loadAndMoveToPageByIndex(this.getCurrentPageIndex() + 1);
    }
  };

  Bookstrap.prototype.movePrevious = function() {
    if (this.hasPrevious()) {
      this.loadAndMoveToPageByIndex(this.getCurrentPageIndex() - 1);
    }
  };

  Bookstrap.prototype.moveFirst = function() {
    this.loadAndMoveToPageByIndex(0);
  };

  Bookstrap.prototype.moveLast = function() {
    this.loadAndMoveToPageByIndex(this.pages.getLength() - 1);
  };

  Bookstrap.prototype.loadAndMoveToPageByIndex = function(index) {
    if (!this.pages.get(index)) {
      console.log('Invalid page index %s', index);
      return;
    }
    var domPage = this.loadPageByIndex(index);
    var self = this;
      // Wait for DOM to update before moving
      setTimeout(function() {
        self.moveToDOMPage(domPage);
      }, 0);
  };

  Bookstrap.prototype.hasNext = function() {
    return this.pages.getNext(this.getCurrentPageIndex()) !== undefined;
  };

  Bookstrap.prototype.hasPrevious = function() {
    return this.pages.getPrevious(this.getCurrentPageIndex()) !== undefined;
  };

  Bookstrap.prototype.getCurrentPageIndex = function() {
    return this.pages.indexOf(this.domPages.current.page);
  };

  Bookstrap.prototype.navigate = function(url) {
    if (!url)
      return;
    // add basePath only if not already present
    if (url.indexOf(this.config.basePath) === -1) {
      url = this.config.basePath + url;
    }
    var page = this.pages.findByURL(url);
    if (! page) {
      console.warn('Invalid link, internal links supported only');
      return;
    }
    var domPage = this.loadPage(page);
    var self = this;
    // Wait for DOM to update before moving
    setTimeout(function() {
      self.moveToDOMPage(domPage);
    }, 0);
  };

  Bookstrap.prototype.titleFromHTML = function(html) {
    var match = html.match(/<title>([^<]+)<\/title>/);
    return match[1];
  }

  return Bookstrap;
});